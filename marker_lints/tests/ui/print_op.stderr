warning: print test
 --> $DIR/print_op.rs:5:5
  |
5 |     let _print_alg_ops = 1 + 2 * -3;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: BinaryOp(
              BinaryOpExpr {
                  data: CommonExprData {
                      _lifetime: PhantomData<&()>,
                      id: ExprId(..),
                      span: SpanId(..),
                  },
                  left: IntLit(
                      IntLitExpr {
                          data: CommonExprData {
                              _lifetime: PhantomData<&()>,
                              id: ExprId(..),
                              span: SpanId(..),
                          },
                          value: 1,
                          suffix: None,
                      },
                  ),
                  right: BinaryOp(
                      BinaryOpExpr {
                          data: CommonExprData {
                              _lifetime: PhantomData<&()>,
                              id: ExprId(..),
                              span: SpanId(..),
                          },
                          left: IntLit(
                              IntLitExpr {
                                  data: CommonExprData {
                                      _lifetime: PhantomData<&()>,
                                      id: ExprId(..),
                                      span: SpanId(..),
                                  },
                                  value: 2,
                                  suffix: None,
                              },
                          ),
                          right: UnaryOp(
                              UnaryOpExpr {
                                  data: CommonExprData {
                                      _lifetime: PhantomData<&()>,
                                      id: ExprId(..),
                                      span: SpanId(..),
                                  },
                                  expr: IntLit(
                                      IntLitExpr {
                                          data: CommonExprData {
                                              _lifetime: PhantomData<&()>,
                                              id: ExprId(..),
                                              span: SpanId(..),
                                          },
                                          value: 3,
                                          suffix: None,
                                      },
                                  ),
                                  kind: Neg,
                              },
                          ),
                          kind: Mul,
                      },
                  ),
                  kind: Add,
              },
          )
  = note: `#[warn(marker::test_lint)]` on by default

warning: print test
 --> $DIR/print_op.rs:6:5
  |
6 |     let _print_bool_ops = true && false || !true;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: BinaryOp(
              BinaryOpExpr {
                  data: CommonExprData {
                      _lifetime: PhantomData<&()>,
                      id: ExprId(..),
                      span: SpanId(..),
                  },
                  left: BinaryOp(
                      BinaryOpExpr {
                          data: CommonExprData {
                              _lifetime: PhantomData<&()>,
                              id: ExprId(..),
                              span: SpanId(..),
                          },
                          left: BoolLit(
                              BoolLitExpr {
                                  data: CommonExprData {
                                      _lifetime: PhantomData<&()>,
                                      id: ExprId(..),
                                      span: SpanId(..),
                                  },
                                  value: true,
                              },
                          ),
                          right: BoolLit(
                              BoolLitExpr {
                                  data: CommonExprData {
                                      _lifetime: PhantomData<&()>,
                                      id: ExprId(..),
                                      span: SpanId(..),
                                  },
                                  value: false,
                              },
                          ),
                          kind: And,
                      },
                  ),
                  right: UnaryOp(
                      UnaryOpExpr {
                          data: CommonExprData {
                              _lifetime: PhantomData<&()>,
                              id: ExprId(..),
                              span: SpanId(..),
                          },
                          expr: BoolLit(
                              BoolLitExpr {
                                  data: CommonExprData {
                                      _lifetime: PhantomData<&()>,
                                      id: ExprId(..),
                                      span: SpanId(..),
                                  },
                                  value: true,
                              },
                          ),
                          kind: Not,
                      },
                  ),
                  kind: Or,
              },
          )

warning: print test
 --> $DIR/print_op.rs:7:5
  |
7 |     let _print_ref = &mut value;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: Ref(
              RefExpr {
                  data: CommonExprData {
                      _lifetime: PhantomData<&()>,
                      id: ExprId(..),
                      span: SpanId(..),
                  },
                  expr: Path(
                      PathExpr {
                          data: CommonExprData {
                              _lifetime: PhantomData<&()>,
                              id: ExprId(..),
                              span: SpanId(..),
                          },
                          path: AstQPath {
                              self_ty: None,
                              path_ty: None,
                              path: AstPath {
                                  segments: [
                                      AstPathSegment {
                                          ident: Ident {
                                              name: "value",
                                              span: Span {
                                                  source: File(
                                                      "$DIR/print_op.rs",
                                                  ),
                                                  start: 203,
                                                  end: 208,
                                              },
                                          },
                                          generics: GenericArgs {
                                              args: [],
                                          },
                                      },
                                  ],
                              },
                              target: Var(
                                  VarId(..),
                              ),
                          },
                      },
                  ),
                  is_mut: true,
              },
          )

warning: 3 warnings emitted

